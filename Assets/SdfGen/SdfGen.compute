#pragma kernel GenSdf

RWTexture2D<float4> Result;
StructuredBuffer<float3> Centres;
int NumCentres;
float4 Size;

[numthreads(8,8,1)]
void GenSdf (uint3 id : SV_DispatchThreadID)
{
    float max = length(Size);
    float dist = max;
    for (int i = 0; i < NumCentres; i++) {
        // pos x layer
        dist = min(dist, length(id - Centres[i] + float3(Size.x, -Size.y, -Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(Size.x, -Size.y, 0)));
        dist = min(dist, length(id - Centres[i] + float3(Size.x, -Size.y, Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(Size.x, 0, -Size.x)));
        dist = min(dist, length(id - Centres[i] + float3(Size.x, 0, 0)));
        dist = min(dist, length(id - Centres[i] + float3(Size.x, 0, Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(Size.x, Size.y, -Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(Size.x, Size.y, 0)));
        dist = min(dist, length(id - Centres[i] + float3(Size.x, Size.y, Size.z)));

        // 0 x layer
        dist = min(dist, length(id - Centres[i] + float3(0, -Size.y, -Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(0, -Size.y, 0)));
        dist = min(dist, length(id - Centres[i] + float3(0, -Size.y, Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(0, 0, -Size.x)));
        dist = min(dist, length(id - Centres[i] + float3(0, 0, 0)));
        dist = min(dist, length(id - Centres[i] + float3(0, 0, Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(0, Size.y, -Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(0, Size.y, 0)));
        dist = min(dist, length(id - Centres[i] + float3(0, Size.y, Size.z)));

        // neg x layer
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, -Size.y, -Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, -Size.y, 0)));
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, -Size.y, Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, 0, -Size.x)));
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, 0, 0)));
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, 0, Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, Size.y, -Size.z)));
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, Size.y, 0)));
        dist = min(dist, length(id - Centres[i] + float3(-Size.x, Size.y, Size.z)));

    }
    // dist /= max; // normalise to 1.0f = max dist on texture
    // dist = 1.0f - dist; // invert 
    Result[id.xy] = float4(dist, dist, dist, 1);
}
